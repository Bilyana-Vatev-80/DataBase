CREATE DATABASE `fsd`;
USE `fsd`;

# 1.Table Design
CREATE TABLE `countries`(
   `id` INT PRIMARY KEY AUTO_INCREMENT,
   `name` VARCHAR(45) NOT NULL
);

CREATE TABLE `towns`(
   `id` INT PRIMARY KEY AUTO_INCREMENT,
   `name` VARCHAR(45) NOT NULL,
   `country_id` INT NOT NULL,
   CONSTRAINT fk_towns_countries
   FOREIGN KEY (`country_id`)
   REFERENCES countries (`id`)
);

CREATE TABLE `stadiums`(
    `id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(45) NOT NULL,
    `capacity` INT NOT NULL,
	`town_id` INT NOT NULL,
     CONSTRAINT fk_stadiums_towns
     FOREIGN KEY (`town_id`)
     REFERENCES towns (`id`)
);

CREATE TABLE `teams`(
    `id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(45) NOT NULL,
    `established` DATE NOT NULL,
    `fan_base` BIGINT(20) NOT NULL,
    `stadium_id` INT NOT NULL,
    CONSTRAINT fk_teams_stadiums
	FOREIGN KEY (`stadium_id`)
	REFERENCES stadiums(`id`)
);

CREATE TABLE `skills_data`(
     `id` INT PRIMARY KEY AUTO_INCREMENT,
     `dribbling` INT,
     `pace` INT,
     `passing` INT,
     `shooting` INT,
     `speed` INT,
     `strength` INT
);

CREATE TABLE `players`(
   `id` INT PRIMARY KEY AUTO_INCREMENT,
   `first_name` VARCHAR(10) NOT NULL,
   `last_name` VARCHAR(20) NOT NULL,
    `age` INT NOT NULL,
    `position` CHAR(1) NOT NULL,
    `salary` DECIMAL(10,2) DEFAULT 0 NOT NULL,
    `hire_date` DATETIME,
    `skills_data_id` INT NOT NULL,
    `team_id` INT,
    CONSTRAINT fk_players_skills_data
	FOREIGN KEY (`skills_data_id`)
	REFERENCES skills_data (`id`),
    CONSTRAINT fk_players_teams
	FOREIGN KEY (`team_id`)
	REFERENCES teams (`id`)
);

CREATE TABLE `coaches`(
    `id` INT PRIMARY KEY AUTO_INCREMENT,
    `first_name` VARCHAR(10) NOT NULL,
    `last_name` VARCHAR(20) NOT NULL,
    `salary` DECIMAL(10,2) DEFAULT 0 NOT NULL,
    `coach_level` INT NOT NULL
);

CREATE TABLE `players_coaches`(
    `player_id` INT NOT NULL,
    `coach_id` INT NOT NULL,
    CONSTRAINT pk_players_coaches
    PRIMARY KEY (`player_id`,`coach_id`),
    CONSTRAINT fk_players_coaches_players
    FOREIGN KEY(`player_id`)
    REFERENCES `players`(`id`),
    CONSTRAINT fk_players_coaches_coaches
    FOREIGN KEY(`coach_id`)
    REFERENCES `coaches`(`id`)
);

# 2.Insert
INSERT INTO `coaches`(`first_name`,`last_name`, `salary`, `coach_level`)
SELECT `first_name`, `last_name`, `salary` * 2,
char_length(`first_name`)
FROM `players`
WHERE `age` >= 45;

# 3.UPDATE
UPDATE `coaches`
SET `coach_level` = `coach_level` + 1
WHERE LEFT(`first_name`, 1) = 'A'
AND id IN (SELECT coach_id FROM players_coaches);

# 4. DELETE
DELETE FROM players
WHERE age >= 45;

# 5. Players
SELECT `first_name`, `age`, `salary` FROM players
ORDER BY `salary` DESC;

# 6. Young offense players without contract
SELECT p.`id`, CONCAT(p.`first_name`, ' ', p.`last_name`) AS 'full_name', p.`age`, p.`position`, p.`hire_date`
FROM players AS `p`
JOIN skills_data AS `sd` ON sd.`id` = p.`skills_data_id`
WHERE p.`age` < 23 AND p.`position` = 'A' AND year( p.`hire_date`) IS NULL AND sd.`strength` > 50
ORDER BY p.`salary`, p.`age`;

# 7. Detail info for all teams
SELECT t.`name` AS 'team_name', t.`established`, t.`fan_base`, COUNT(p.id) AS 'players_count'
FROM teams AS `t`
LEFT JOIN players AS `p` ON p.`team_id` = t.`id`
GROUP BY t.id
ORDER BY players_count DESC, fan_base DESC;

# 8. The fastest player by towns
SELECT MAX(sd.speed) AS 'max_speed', town.`name` AS 'town_name' FROM towns AS `town`
LEFT JOIN stadiums AS `st` ON town.id = st.town_id
LEFT JOIN teams AS `tm` ON tm.stadium_id = st.id
LEFT JOIN players AS p ON  tm.id = p.team_id
LEFT JOIN skills_data AS sd ON p.skills_data_id = sd.id
WHERE tm.`name` != 'Devify'
GROUP BY town.id
ORDER BY `max_speed` DESC, `town_name`;

# 9. Total salaries and players by country
SELECT c.`name`, COUNT(p.id) AS 'total_count_of_players',
SUM(p.salary) AS 'total_sum_of_salary'
FROM countries AS c
LEFT JOIN towns AS `t` ON c.id = t.country_id
LEFT JOIN stadiums AS `st` ON t.id = st.town_id
LEFT JOIN teams AS `tm` ON  st.id = tm.stadium_id
LEFT JOIN players AS `p` ON  tm.id = p.team_id
GROUP BY c.id
ORDER BY `total_count_of_players` DESC, c.`name`;

# 10. Find all players that play on stadium
SELECT COUNT(p.id) AS 'count' FROM stadiums AS `s`
LEFT JOIN teams AS `t` ON s.id = t.stadium_id
LEFT JOIN players AS `p` ON t.id = p.team_id
WHERE s.`name` = 'Jaxworks';

DELIMITER $$
CREATE FUNCTION udf_stadium_players_count (stadium_name VARCHAR(30))
RETURNS INT
DETERMINISTIC
BEGIN
      RETURN(SELECT COUNT(p.id) FROM stadiums AS `s`
      LEFT JOIN teams AS `t` ON s.id = t.stadium_id
      LEFT JOIN players AS `p` ON t.id = p.team_id
      WHERE s.`name` = stadium_name);
END $$
DELIMITER ;

SELECT udf_stadium_players_count ('Linklinks') as `count`;

# 11.	Find good playmaker by teams
DELIMITER $$
CREATE PROCEDURE udp_find_playmaker(min_dribble_points INT,  team_name VARCHAR(45))
BEGIN
   SELECT CONCAT(p.first_name, ' ', p.last_name) AS 'full_name', p.age, p.salary, sd.dribbling, sd.speed, t.`name`
   FROM teams AS `t`
   JOIN players AS `p` ON t.id = p.team_id
   JOIN skills_data AS `sd` ON p.id = sd.id
   WHERE sd.dribbling > min_dribble_points AND t.`name` = team_name
   ORDER BY sd.speed DESC LIMIT 1;
END$$
DELIMITER ;

CALL udp_find_playmaker (20,'Skyble');

SELECT CONCAT(p.first_name, ' ', p.last_name) AS 'full_name', p.age, p.salary, sd.dribbling, sd.speed, t.`name`
FROM teams AS `t`
JOIN players AS `p` ON t.id = p.team_id
JOIN skills_data AS `sd` ON p.id = sd.id
WHERE sd.dribbling > 20 AND t.`name` = 'Skyble'
ORDER BY sd.speed DESC LIMIT 1;